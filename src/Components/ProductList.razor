@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileProductService ProductService


@code {

    // Parameters to accept from the parent component, by default it filters for ProductType = Sport
    [Parameter] public string ProductTypeFilter { get; set; } = "Sport";

    // Filters for a specific Sport
    [Parameter] public string SpecificSportFilter { get; set; } = null;


    // Variables for the filtered product list
    private IEnumerable<ProductModel> filteredProducts;


    // Re-fetch all products and apply filter when the component is loaded
    protected override async Task OnInitializedAsync()
    {
        await LoadFilteredProducts(); // Fetch the products and apply the initial filter
    }

    // Method to load filtered products from the service
    private async Task LoadFilteredProducts()
    {
        var allProducts = ProductService.GetAllData();


        // Both Sport = null and ProductType = null
        if (string.IsNullOrEmpty(SpecificSportFilter) && string.IsNullOrEmpty(ProductTypeFilter))
        {
            filteredProducts = allProducts;
        }

        // Both not null, Filtering by both ProductType and Sport
        else if (!string.IsNullOrEmpty(SpecificSportFilter) &&! string.IsNullOrEmpty(ProductTypeFilter))
        {
            filteredProducts = allProducts.Where(p => p.ProductType.ToString() == ProductTypeFilter && p.Sport == SpecificSportFilter);

        }

        // Sport = null, Filtering by ProductType
        else if (string.IsNullOrEmpty(SpecificSportFilter))
        {
            // Filter products by ProductType == Sport
            filteredProducts = allProducts.Where(p => p.ProductType.ToString() == ProductTypeFilter);
        }


        // ProductType = null, Filtering by Sport
        else
        {
            // Filter products by ProductType == Team and Sport == SportFilter
            filteredProducts = allProducts.Where(p => p.ProductType.ToString() == ProductTypeFilter && p.Sport == SpecificSportFilter);
        }
    }

    // Method to handle filtering for just teams
    private async Task FilterByProductType(string type)
    {
        SpecificSportFilter = null; // Set SportFilter to null for "Sport" filter. only will search that type
        ProductTypeFilter = type;

        await LoadFilteredProducts(); // Fetch filtered products
    }

    private async Task FilterBySport(string sport)
    {
        SpecificSportFilter = sport; // Set SportFilter to null for "Sport" filter
        ProductTypeFilter = "Team";

        await LoadFilteredProducts(); // Fetch filtered products
    }

    // Method to handle filtering when the second button is clicked (for Team and Sport)
    private async Task FilterShowAllSports()
    {
        SpecificSportFilter = null;
        ProductTypeFilter = "Sport"; // Set SportFilter sport for filtering
        await LoadFilteredProducts(); // Fetch filtered products by Team and Sport
    }
}

<div>
    <!-- Filter buttons -->
    <button @onclick="FilterShowAllSports" class="btn btn-primary">Show All Sports</button>
</div>


<div class="card-columns">
    @foreach (var product in filteredProducts)
    {
        <div class="card">
            <div class="card-img" style="background-image: url('@product.Image');">
            </div>
            <div class="card-body">
                <h5 class="card-title">@product.Title</h5>
            </div>
            <div class="card-footer">
                <small class="text-muted">
                    <button @onclick="(e => SelectProduct(product.Id))"
                            data-toggle="modal" data-target="#productModal" class="btn btn-primary">
                        More Info
                    </button>
                    @if (product.ProductType == ProductTypeEnum.Sport)
                    {
                        <!-- Show the 'View Teams' button only if the ProductType is 'Sport' -->
                        <button @onclick="(e => FilterBySport(product.Sport))"
                        class="btn btn-custom-blue ml-2">
                            View Teams
                        </button>
                    }
                </small>
            </div>
        </div>
    }
</div>

@if (selectedProduct != null)
{
    <div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="productTitle">@selectedProduct.Title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card">
                        <div class="card-img" style="background-image: url('@selectedProduct.Image');">
                        </div>
                        <div class="card-body">
                            <p class="card-text">@selectedProduct.Description</p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    @if (voteCount == 0)
                    {
                        <span>Be the first to vote!</span>
                    }
                    else
                    {
                        <span>@voteCount @voteLabel</span>
                    }
                    @for (int i = 1; i < 6; i++)
                    {
                        var currentStar = i;
                        if (i <= currentRating)
                        {
                            <span class="fa fa-star checked" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                        else
                        {
                            <span class="fa fa-star" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code
{
    ProductModel selectedProduct;
    string selectedProductId;

    void SelectProduct(string productId)
    {
        selectedProductId = productId;
        selectedProduct = ProductService.GetAllData().First(x => x.Id == productId);
        GetCurrentRating();
    }

    int currentRating = 0;
    int voteCount = 0;
    string voteLabel;

    void GetCurrentRating()
    {
        if (selectedProduct.Ratings == null)
        {
            currentRating = 0;
            voteCount = 0;
        }
        else
        {
            voteCount = selectedProduct.Ratings.Count();
            voteLabel = voteCount > 1 ? "Votes" : "Vote";
            currentRating = selectedProduct.Ratings.Sum() / voteCount;
        }

        System.Console.WriteLine($"Current rating for {selectedProduct.Id}: {currentRating}");
    }

    void SubmitRating(int rating)
    {
        System.Console.WriteLine($"Rating received for {selectedProduct.Id}: {rating}");
        ProductService.AddRating(selectedProductId, rating);
        SelectProduct(selectedProductId);
    }
}
